buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'de.interactive_instruments', name: 'gradle-plugin-osgi-ipojo', version: '1.12.1.26'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
        classpath 'com.netflix.nebula:nebula-ospackage-plugin:3.+'
    }
}

apply plugin: 'application'

version = '1.2.2'
group = 'de.interactive_instruments'

repositories {
    //mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url "https://dl.bintray.com/iide/maven"
    }
    maven {
        url "http://maven.forgerock.org/repo/repo"
    }
}

configurations {
    bundles
    bundlesRuntime
}

dependencies {
    // TODO: are all the jars in lib dependencies of this?
    compile group: 'de.interactive_instruments', name: 'xtraplatform-runtime', version: '1.1.0'

    bundlesRuntime group: 'de.interactive_instruments', name: 'xtraplatform-bundles-runtime', version: '1.1.0'

    bundles(group: 'de.interactive_instruments', name: 'xtraplatform-bundles-core', version: '1.1.0') {
        // TODO
        exclude module: 'xtraplatform-kvstore-inmemory'
    }
    //bundles group: 'de.interactive_instruments', name: 'xtraplatform-bundles-devel', version: '1.1.0-SNAPSHOT'
    bundles group: 'de.interactive_instruments', name: 'xtraplatform-sdi-tools', version: '1.1.4'

    // ???
    subprojects.each {
        bundles(it) {
            transitive = false
        }
    }
}

// TODO env plugin
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

mainClassName = "de.ii.xtraplatform.runtime.FelixRuntime"

/*task devBundles(type: Sync) {
    from configurations.bundles.resolvedConfiguration.resolvedArtifacts.findAll({
        it.moduleVersion.id in configurations.bundles.incoming.resolutionResult.root.dependencies.collect({it.selected.dependencies}).collectNested({it.selected.moduleVersion}).flatten()
    }).collect({it.file})
    into "$buildDir/bundles/runtime"
}*/

distributions {
    main {
        contents {
            from(configurations.bundles) {
                into "bundles/platform"
            }
            from(configurations.bundlesRuntime) {
                into "bundles/runtime"
            }
            into('') {
                //create an empty 'data/log' directory in distribution root
                def appDirBase = new File(buildDir, 'tmp/app-dummy-dir')
                def logDir = new File(appDirBase, 'data/log')
                logDir.mkdirs()

                from {appDirBase}
            }
        }
    }
}
distTar.version = ''

ext {
    dataDir = new File(buildDir, 'data')
}

task initData {
    doLast {
        dataDir.mkdirs()
    }
}

task cleanFelixCache(type: Delete) {
    delete new File(dataDir, 'felix-cache')
}

run {
    dependsOn installDist
    dependsOn initData
    dependsOn cleanFelixCache
    workingDir = installDist.destinationDir
    args dataDir.absolutePath
}

tasks.startScripts.unixStartScriptGenerator.template = resources.text.fromFile('gradle/sh-start-script')


apply from: 'bundles.gradle'

apply from: 'docker.gradle'

//apply from: 'packaging.gradle'

apply from: 'license-report.gradle'
