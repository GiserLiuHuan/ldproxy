        </div>

        <footer class="footer bg-light py-4 d-flex flex-column justify-content-around align-items-center">
            {{#htmlConfig}}
            {{#footerText}}
                <div class="container text-muted text-center">
                    {{{.}}}
                </div>
            {{/footerText}}
            {{/htmlConfig}}
	        <div class="container d-flex flex-row justify-content-between align-items-center w-100">
	            {{> brand}}
                <span>
                {{#htmlConfig}}
                {{#legalUrl}}
                    <span><a class="small mr-2" href="{{.}}" target="_blank">{{legalName}}</a></span>
                {{/legalUrl}}
                {{#privacyUrl}}
                    <span><a class="small" href="{{.}}" target="_blank">{{privacyName}}</a></span>
                {{/privacyUrl}}
                {{/htmlConfig}}
                </span>
	        </div>
        </footer>

    </body>

    {{#withOlMap}}
    <script>
    {{#styles}}
    {{#sections}}
    {{#mapboxStyleUrl}}
    var map_{{styleId}} = olms.apply('map-container-{{styleId}}', '{{{.}}}');
    const extent_{{styleId}} = ol.proj.transformExtent(window._ldproxy.ol_map.extent, 'EPSG:4326', 'EPSG:3857');
    map_{{styleId}}.getView().fit(extent_{{styleId}}, map_{{styleId}}.getSize());
    {{/mapboxStyleUrl}}
    {{/sections}}
    {{/styles}}
    {{^styles}}
      const template = "{{{tilesUrl}}}";
      const tileMatrixSetId = document.getElementById('tileMatrixSetId').innerText;
      var tilesUrl = template.replace("{tileMatrixSetId}",tileMatrixSetId).replace("{tileMatrix}","{z}").replace("{tileRow}","{y}").replace("{tileCol}","{x}")
      var map = new ol.Map({
        target: 'map-container',
                view: new ol.View({
                }),
                layers: [
					new ol.layer.Tile({
						source: new ol.source.XYZ({
							attributions: window._ldproxy.ol_map.attribution,
					  		url: window._ldproxy.ol_map.url
						})
					}),
                    new ol.layer.VectorTile({
			            declutter: true,
                    	title: "Vector Tiles",
                        source: new ol.source.VectorTile({
                            format: new ol.format.MVT(),
                            url: tilesUrl
                        }),
                        style: function(feature, res) {
                            return new ol.style.Style({
                                stroke: new ol.style.Stroke({
                                    width: 1,
                                    color: 'rgba(0, 102, 204, 0.6)'
                                }),
                                fill: new ol.style.Fill({
                                    color: 'rgba(0, 102, 204, 0.15)'
                                }),
                                image: new ol.style.Circle({
							 		radius: 3,
									fill: new ol.style.Fill({
										color: 'rgba(0, 102, 204, 0.15)'
									}),
									stroke: new ol.style.Stroke({
										width: 1,
										color: 'rgba(0, 102, 204, 0.8)'
									})
							 	})
                            })
                        }
                    })
                ]
     });
    const extent = ol.proj.transformExtent(window._ldproxy.ol_map.extent, 'EPSG:4326', 'EPSG:3857');
    map.getView().fit(extent, map.getSize());

    map.on('pointermove', showInfo);
    var info = document.getElementById('info');
    function showInfo(event) {
        var features = map.getFeaturesAtPixel(event.pixel);
        if (!features) {
            info.innerText = '';
            info.style.opacity = 0;
            return;
        }
        var properties = features[0].getProperties();
        info.innerText = JSON.stringify(properties, null, 2);
        info.style.opacity = 1;
    }
    {{/styles}}
    </script>
    {{/withOlMap}}
</html>
